#include <Arduino.h>
#include "DYPlayerArduino.h"
#include <IRremote.h>
#include <IRremote.h>
#include <IRremoteInt.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

#ifndef STASSID
#define STASSID "127.0.0.1"
#define STAPSK "5169848656"
#endif

const char* ssid = STASSID;
const char* password = STAPSK;

const char* host = "192.168.10.234";
const uint16_t port = 3000;

DY::Player player;
ESP8266WiFiMulti WiFiMulti;


#define MAGIQUEST_PERIOD     1150
#define MAGIQUEST_MARK_ZERO  280
#define MAGIQUEST_SPACE_ZERO 850
#define MAGIQUEST_MARK_ONE   580
#define MAGIQUEST_SPACE_ONE  600
//#define MAGIQUEST_BITS 56
//#define MAGIQUEST 11

union magiquest {
  uint64_t llword;
  uint8_t    byte[8];
  uint32_t  lword[2];
  struct {
    uint16_t magnitude;
    uint32_t wand_id;
    uint8_t  padding;
    uint8_t  scrap;
  } cmd ;
} ;

// hoist IRremote DEFs into our namespace for quick compatibility
#define ERR 0
#define DECODED 1

// Use analog 0 as our receiver
int recv_pin =D0;
IRrecv irrecv(recv_pin);

// Results as read from the IR sensor. We need to run this through
// the decodeMagiQuest function to get useful data.
decode_results results;
magiquest data;

void setup() {
  Serial.begin(9600);
  while (!Serial) {
    ;
  }
  connectToWifi();
  Serial.println("Comms enabled - beginning sensing");
  player.begin();
  player.setVolume(20); // 50% Volume
  player.setCycleMode(DY::PlayMode::OneOff);
  irrecv.enableIRIn();
}

void loop() {
  if (irrecv.decode(&results)) {
    decodeMagiQuest(&results, &data);
    if (data.cmd.magnitude > 20000) {
      Serial.println("");
      Serial.print("wand_id: ");
      Serial.print(data.cmd.wand_id);
      Serial.print(" | scrap: ");
      Serial.print(data.cmd.scrap);
      Serial.print(" | padding: ");
      Serial.print(data.cmd.padding);
      Serial.print(" | magnitude: ");
      Serial.println(data.cmd.magnitude);
      if (WiFiMulti.run() == WL_CONNECTED) {
        //callRemoteAPI();
        player.playSpecified(1);
        delay(10000);
        Serial.print("Ready.");  
      }
    } else {
      Serial.print(".");
    }
    irrecv.resume(); 
  }
  delay(100);
}

/*
 * This decodeMagiQuest method cribbed from mpflaga (https://github.com/mpflaga/Arduino-IRremote) 
 * mode of the Arduino IRremote library. Excised and updated to work with current IRremote
 * library.
 * 
 * https://github.com/mpflaga/Arduino-IRremote/blob/master/IRremote.cpp
 * 
 */
int32_t  decodeMagiQuest(decode_results *results, magiquest *mdata) {
  magiquest data;
  data.llword = 0;

  int16_t offset = 1;
  uint16_t mark_;
  uint16_t space_;
  uint8_t multiple_;

  if (irparams.rawlen < 2 * MAGIQUEST_BITS) {
    return ERR;
  }

  while (offset + 1 < irparams.rawlen) {
    mark_ = results->rawbuf[offset];
    space_ = results->rawbuf[offset+1];
    multiple_ = space_ / mark_;
    // it is either 25% + 75% or 50% + 50%

    if (MATCH_MARK(space_ + mark_, MAGIQUEST_PERIOD)) {
      if (multiple_ > 1) {
        data.llword <<= 1;
      } else {
        data.llword = (data.llword << 1) | 1;
      }
    } else {
      return ERR;
    }
    offset++;
    offset++;
  }
  // Success
  results->bits = (offset + 1) / 2;
  if (results->bits < 12) {
    results->bits = 0;
    return ERR;
  }
  //results->magiquestMagnitude = data.cmd.magnitude;
  results->value = data.cmd.wand_id;
  results->decode_type = MAGIQUEST;

  // fill in our magiquest struct
  mdata->cmd.magnitude = data.cmd.magnitude;
  mdata->cmd.wand_id = data.cmd.wand_id;
  return DECODED;
}

void connectToWifi() {
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP(ssid, password);
  Serial.println();
  Serial.print("Wait for WiFi... ");
  while (WiFiMulti.run() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
    Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  delay(500);
}

void callRemoteAPI() {
  WiFiClient client;
  HTTPClient http;
  if (http.begin(client, "http://alpha.jaypoc.com/homequest.php")) {
    int httpCode = http.GET();
    if (httpCode > 0) {
      if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
        String payload = http.getString();
        Serial.println(payload);
      }
    }  else {
      Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
    }
    http.end();
  }else {
    Serial.println("[HTTP] Unable to connect");
  }
}